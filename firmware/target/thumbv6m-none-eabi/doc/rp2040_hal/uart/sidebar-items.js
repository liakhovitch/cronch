window.SIDEBAR_ITEMS = {"enum":[["DataBits","Data bits"],["Error","Error type for UART operations."],["FifoWatermark","Rx/Tx FIFO Watermark"],["Parity","Parity The “none” state of parity is represented with the Option type (None)."],["ReadErrorType","Possible types of read errors. See Chapter 4, Section 2 §8 - Table 436: “UARTDR Register”"],["StopBits","Stop bits"]],"mod":[["common_configs","Common configurations for UART."]],"struct":[["Disabled","UART is disabled."],["Enabled","UART is enabled."],["Pins","Customizable Uart pinout, allowing you to set the pins individually."],["ReadError","When there’s a read error."],["Reader","Half of an `UartPeripheral` that is only capable of reading. Obtained by calling `UartPeripheral::split()`"],["UartConfig","A struct holding the configuration for an UART device."],["UartPeripheral","An UART Peripheral based on an underlying UART device."],["Writer","Half of an `UartPeripheral` that is only capable of writing. Obtained by calling `UartPeripheral::split()`"]],"trait":[["Cts","Indicates a valid CTS pin for UART0 or UART1"],["Rts","Indicates a valid RTS pin for UART0 or UART1"],["Rx","Indicates a valid RX pin for UART0 or UART1"],["State","State of the UART Peripheral."],["Tx","Indicates a valid TX pin for UART0 or UART1"],["UartDevice","Trait to handle both underlying devices (UART0 & UART1)"],["ValidUartPinout","Declares a valid UART pinout."]]};