window.SIDEBAR_ITEMS = {"fn":[["dadd","Calculates `a + b`"],["datan2","Computes the arc tangent of `y/x` using the signs of arguments to determine the correct quadrant"],["dcmp","Compares two floating point numbers, returning: • 0 if a == b • -1 if a < b • 1 if a > b"],["dcos","Calculates the cosine of `angle`. The value of `angle` is in radians, and must be in the range `-1024` to `1024`"],["ddiv","Calculates `a / b`"],["dexp","Calculates the exponential value of `v`, i.e. `e ** v`"],["dln","Calculates the natural logarithm of v. If v <= 0 return -Infinity"],["dmul","Calculates `a * b`"],["double_to_fix","Converts an f64 to an signed fixed point integer representation where n specifies the position of the binary point in the resulting fixed point representation, e.g. `f(0.5f, 16) == 0x8000`. This method rounds towards -Infinity, and clamps the resulting integer to lie within the range `0x00000000` to `0xFFFFFFFF`"],["double_to_fix64","Converts an f64 to a signed fixed point 64-bit integer representation where n specifies the position of the binary point in the resulting fixed point representation - e.g. `f(0.5f, 16) == 0x8000`. This method rounds towards -Infinity, and clamps the resulting integer to lie within the range `-0x8000000000000000` to `0x7FFFFFFFFFFFFFFF`"],["double_to_float","Converts an f64 to an f32"],["double_to_int","Converts an f64 to a signed integer, rounding towards -Infinity, and clamping the result to lie within the range `-0x80000000` to `0x7FFFFFFF`"],["double_to_int64","Convert an f64 to a signed 64-bit integer, rounding towards -Infinity, and clamping the result to lie within the range `-0x8000000000000000` to `0x7FFFFFFFFFFFFFFF`"],["double_to_ufix","Converts an f64 to an unsigned fixed point integer representation where n specifies the position of the binary point in the resulting fixed point representation, e.g. `f(0.5f, 16) == 0x8000`. This method rounds towards -Infinity, and clamps the resulting integer to lie within the range `0x00000000` to `0xFFFFFFFF`"],["double_to_ufix64","Converts an f64 to an unsigned fixed point 64-bit integer representation where n specifies the position of the binary point in the resulting fixed point representation, e.g. `f(0.5f, 16) == 0x8000`. This method rounds towards -Infinity, and clamps the resulting integer to lie within the range `0x0000000000000000` to `0xFFFFFFFFFFFFFFFF`"],["double_to_uint","Converts an f64 to an unsigned integer, rounding towards -Infinity, and clamping the result to lie within the range `0x00000000` to `0xFFFFFFFF`"],["double_to_uint64","Converts an f64 to an unsigned 64-bit integer, rounding towards -Infinity, and clamping the result to lie within the range `0x0000000000000000` to `0xFFFFFFFFFFFFFFFF`"],["dsin","Calculates the sine of `angle`. The value of `angle` is in radians, and must be in the range `-1024` to `1024`"],["dsqrt","Calculates `sqrt(v)` (or return -Infinity if v is negative)"],["dsub","Calculates `a - b`"],["dtan","Calculates the tangent of `angle`. The value of `angle` is in radians, and must be in the range `-1024` to `1024`"],["fix64_to_doubl","Converts a signed fixed point 64-bit integer representation to the nearest double value, rounding to even on tie. `n` specifies the position of the binary point in fixed point, so `f = nearest(v/(2^n))`"],["fix_to_double","Converts a signed fixed point integer representation to the nearest double value, rounding to even on tie. `n` specifies the position of the binary point in fixed point, so `f = nearest(v/(2^n))`"],["int64_to_double","Converts a signed 64-bit integer to the nearest double value, rounding to even on tie"],["int_to_double","Converts a signed integer to the nearest double value, rounding to even on tie"],["ufix64_to_double","Converts an unsigned fixed point 64-bit integer representation to the nearest double value, rounding to even on tie. `n` specifies the position of the binary point in fixed point, so `f = nearest(v/(2^n))`"],["ufix_to_double","Converts an unsigned fixed point integer representation to the nearest double value, rounding to even on tie. `n` specifies the position of the binary point in fixed point, so f = nearest(v/(2^n))"],["uint64_to_double","Converts an unsigned 64-bit integer to the nearest double value, rounding to even on tie"],["uint_to_double","Converts an unsigned integer to the nearest double value, rounding to even on tie"]],"mod":[["dadd","Additional access for the `dadd` ROM function."],["datan2","Additional access for the `datan2` ROM function."],["dcmp","Additional access for the `dcmp` ROM function."],["dcos","Additional access for the `dcos` ROM function."],["ddiv","Additional access for the `ddiv` ROM function."],["dexp","Additional access for the `dexp` ROM function."],["dln","Additional access for the `dln` ROM function."],["dmul","Additional access for the `dmul` ROM function."],["double_to_fix","Additional access for the `double_to_fix` ROM function."],["double_to_fix64","Additional access for the `double_to_fix64` ROM function."],["double_to_float","Additional access for the `double_to_float` ROM function."],["double_to_int","Additional access for the `double_to_int` ROM function."],["double_to_int64","Additional access for the `double_to_int64` ROM function."],["double_to_ufix","Additional access for the `double_to_ufix` ROM function."],["double_to_ufix64","Additional access for the `double_to_ufix64` ROM function."],["double_to_uint","Additional access for the `double_to_uint` ROM function."],["double_to_uint64","Additional access for the `double_to_uint64` ROM function."],["dsin","Additional access for the `dsin` ROM function."],["dsqrt","Additional access for the `dsqrt` ROM function."],["dsub","Additional access for the `dsub` ROM function."],["dtan","Additional access for the `dtan` ROM function."],["fix64_to_doubl","Additional access for the `fix64_to_doubl` ROM function."],["fix_to_double","Additional access for the `fix_to_double` ROM function."],["int64_to_double","Additional access for the `int64_to_double` ROM function."],["int_to_double","Additional access for the `int_to_double` ROM function."],["ufix64_to_double","Additional access for the `ufix64_to_double` ROM function."],["ufix_to_double","Additional access for the `ufix_to_double` ROM function."],["uint64_to_double","Additional access for the `uint64_to_double` ROM function."],["uint_to_double","Additional access for the `uint_to_double` ROM function."]]};