window.SIDEBAR_ITEMS = {"mod":[["clk_adc_ctrl","Clock control, can be changed on-the-fly (except for auxsrc)"],["clk_adc_div","Clock divisor, can be changed on-the-fly"],["clk_adc_selected","Indicates which SRC is currently selected by the glitchless mux (one-hot). This slice does not have a glitchless mux (only the AUX_SRC field is present, not SRC) so this register is hardwired to 0x1."],["clk_gpout0_ctrl","Clock control, can be changed on-the-fly (except for auxsrc)"],["clk_gpout0_div","Clock divisor, can be changed on-the-fly"],["clk_gpout0_selected","Indicates which SRC is currently selected by the glitchless mux (one-hot). This slice does not have a glitchless mux (only the AUX_SRC field is present, not SRC) so this register is hardwired to 0x1."],["clk_gpout1_ctrl","Clock control, can be changed on-the-fly (except for auxsrc)"],["clk_gpout1_div","Clock divisor, can be changed on-the-fly"],["clk_gpout1_selected","Indicates which SRC is currently selected by the glitchless mux (one-hot). This slice does not have a glitchless mux (only the AUX_SRC field is present, not SRC) so this register is hardwired to 0x1."],["clk_gpout2_ctrl","Clock control, can be changed on-the-fly (except for auxsrc)"],["clk_gpout2_div","Clock divisor, can be changed on-the-fly"],["clk_gpout2_selected","Indicates which SRC is currently selected by the glitchless mux (one-hot). This slice does not have a glitchless mux (only the AUX_SRC field is present, not SRC) so this register is hardwired to 0x1."],["clk_gpout3_ctrl","Clock control, can be changed on-the-fly (except for auxsrc)"],["clk_gpout3_div","Clock divisor, can be changed on-the-fly"],["clk_gpout3_selected","Indicates which SRC is currently selected by the glitchless mux (one-hot). This slice does not have a glitchless mux (only the AUX_SRC field is present, not SRC) so this register is hardwired to 0x1."],["clk_peri_ctrl","Clock control, can be changed on-the-fly (except for auxsrc)"],["clk_peri_selected","Indicates which SRC is currently selected by the glitchless mux (one-hot). This slice does not have a glitchless mux (only the AUX_SRC field is present, not SRC) so this register is hardwired to 0x1."],["clk_ref_ctrl","Clock control, can be changed on-the-fly (except for auxsrc)"],["clk_ref_div","Clock divisor, can be changed on-the-fly"],["clk_ref_selected","Indicates which SRC is currently selected by the glitchless mux (one-hot). The glitchless multiplexer does not switch instantaneously (to avoid glitches), so software should poll this register to wait for the switch to complete. This register contains one decoded bit for each of the clock sources enumerated in the CTRL SRC field. At most one of these bits will be set at any time, indicating that clock is currently present at the output of the glitchless mux. Whilst switching is in progress, this register may briefly show all-0s."],["clk_rtc_ctrl","Clock control, can be changed on-the-fly (except for auxsrc)"],["clk_rtc_div","Clock divisor, can be changed on-the-fly"],["clk_rtc_selected","Indicates which SRC is currently selected by the glitchless mux (one-hot). This slice does not have a glitchless mux (only the AUX_SRC field is present, not SRC) so this register is hardwired to 0x1."],["clk_sys_ctrl","Clock control, can be changed on-the-fly (except for auxsrc)"],["clk_sys_div","Clock divisor, can be changed on-the-fly"],["clk_sys_resus_ctrl",""],["clk_sys_resus_status",""],["clk_sys_selected","Indicates which SRC is currently selected by the glitchless mux (one-hot). The glitchless multiplexer does not switch instantaneously (to avoid glitches), so software should poll this register to wait for the switch to complete. This register contains one decoded bit for each of the clock sources enumerated in the CTRL SRC field. At most one of these bits will be set at any time, indicating that clock is currently present at the output of the glitchless mux. Whilst switching is in progress, this register may briefly show all-0s."],["clk_usb_ctrl","Clock control, can be changed on-the-fly (except for auxsrc)"],["clk_usb_div","Clock divisor, can be changed on-the-fly"],["clk_usb_selected","Indicates which SRC is currently selected by the glitchless mux (one-hot). This slice does not have a glitchless mux (only the AUX_SRC field is present, not SRC) so this register is hardwired to 0x1."],["enabled0","indicates the state of the clock enable"],["enabled1","indicates the state of the clock enable"],["fc0_delay","Delays the start of frequency counting to allow the mux to settle Delay is measured in multiples of the reference clock period"],["fc0_interval","The test interval is 0.98us * 2interval, but letâ€™s call it 1us * 2interval The default gives a test interval of 250us"],["fc0_max_khz","Maximum pass frequency in kHz. This is optional. Set to 0x1ffffff if you are not using the pass/fail flags"],["fc0_min_khz","Minimum pass frequency in kHz. This is optional. Set to 0 if you are not using the pass/fail flags"],["fc0_ref_khz","Reference clock frequency in kHz"],["fc0_result","Result of frequency measurement, only valid when status_done=1"],["fc0_src","Clock sent to frequency counter, set to 0 when not required Writing to this register initiates the frequency count"],["fc0_status","Frequency counter status"],["inte","Interrupt Enable"],["intf","Interrupt Force"],["intr","Raw Interrupts"],["ints","Interrupt status after masking & forcing"],["sleep_en0","enable clock in sleep mode"],["sleep_en1","enable clock in sleep mode"],["wake_en0","enable clock in wake mode"],["wake_en1","enable clock in wake mode"]],"struct":[["RegisterBlock","Register block"]],"type":[["CLK_ADC_CTRL","CLK_ADC_CTRL register accessor: an alias for `Reg<CLK_ADC_CTRL_SPEC>`"],["CLK_ADC_DIV","CLK_ADC_DIV register accessor: an alias for `Reg<CLK_ADC_DIV_SPEC>`"],["CLK_ADC_SELECTED","CLK_ADC_SELECTED register accessor: an alias for `Reg<CLK_ADC_SELECTED_SPEC>`"],["CLK_GPOUT0_CTRL","CLK_GPOUT0_CTRL register accessor: an alias for `Reg<CLK_GPOUT0_CTRL_SPEC>`"],["CLK_GPOUT0_DIV","CLK_GPOUT0_DIV register accessor: an alias for `Reg<CLK_GPOUT0_DIV_SPEC>`"],["CLK_GPOUT0_SELECTED","CLK_GPOUT0_SELECTED register accessor: an alias for `Reg<CLK_GPOUT0_SELECTED_SPEC>`"],["CLK_GPOUT1_CTRL","CLK_GPOUT1_CTRL register accessor: an alias for `Reg<CLK_GPOUT1_CTRL_SPEC>`"],["CLK_GPOUT1_DIV","CLK_GPOUT1_DIV register accessor: an alias for `Reg<CLK_GPOUT1_DIV_SPEC>`"],["CLK_GPOUT1_SELECTED","CLK_GPOUT1_SELECTED register accessor: an alias for `Reg<CLK_GPOUT1_SELECTED_SPEC>`"],["CLK_GPOUT2_CTRL","CLK_GPOUT2_CTRL register accessor: an alias for `Reg<CLK_GPOUT2_CTRL_SPEC>`"],["CLK_GPOUT2_DIV","CLK_GPOUT2_DIV register accessor: an alias for `Reg<CLK_GPOUT2_DIV_SPEC>`"],["CLK_GPOUT2_SELECTED","CLK_GPOUT2_SELECTED register accessor: an alias for `Reg<CLK_GPOUT2_SELECTED_SPEC>`"],["CLK_GPOUT3_CTRL","CLK_GPOUT3_CTRL register accessor: an alias for `Reg<CLK_GPOUT3_CTRL_SPEC>`"],["CLK_GPOUT3_DIV","CLK_GPOUT3_DIV register accessor: an alias for `Reg<CLK_GPOUT3_DIV_SPEC>`"],["CLK_GPOUT3_SELECTED","CLK_GPOUT3_SELECTED register accessor: an alias for `Reg<CLK_GPOUT3_SELECTED_SPEC>`"],["CLK_PERI_CTRL","CLK_PERI_CTRL register accessor: an alias for `Reg<CLK_PERI_CTRL_SPEC>`"],["CLK_PERI_SELECTED","CLK_PERI_SELECTED register accessor: an alias for `Reg<CLK_PERI_SELECTED_SPEC>`"],["CLK_REF_CTRL","CLK_REF_CTRL register accessor: an alias for `Reg<CLK_REF_CTRL_SPEC>`"],["CLK_REF_DIV","CLK_REF_DIV register accessor: an alias for `Reg<CLK_REF_DIV_SPEC>`"],["CLK_REF_SELECTED","CLK_REF_SELECTED register accessor: an alias for `Reg<CLK_REF_SELECTED_SPEC>`"],["CLK_RTC_CTRL","CLK_RTC_CTRL register accessor: an alias for `Reg<CLK_RTC_CTRL_SPEC>`"],["CLK_RTC_DIV","CLK_RTC_DIV register accessor: an alias for `Reg<CLK_RTC_DIV_SPEC>`"],["CLK_RTC_SELECTED","CLK_RTC_SELECTED register accessor: an alias for `Reg<CLK_RTC_SELECTED_SPEC>`"],["CLK_SYS_CTRL","CLK_SYS_CTRL register accessor: an alias for `Reg<CLK_SYS_CTRL_SPEC>`"],["CLK_SYS_DIV","CLK_SYS_DIV register accessor: an alias for `Reg<CLK_SYS_DIV_SPEC>`"],["CLK_SYS_RESUS_CTRL","CLK_SYS_RESUS_CTRL register accessor: an alias for `Reg<CLK_SYS_RESUS_CTRL_SPEC>`"],["CLK_SYS_RESUS_STATUS","CLK_SYS_RESUS_STATUS register accessor: an alias for `Reg<CLK_SYS_RESUS_STATUS_SPEC>`"],["CLK_SYS_SELECTED","CLK_SYS_SELECTED register accessor: an alias for `Reg<CLK_SYS_SELECTED_SPEC>`"],["CLK_USB_CTRL","CLK_USB_CTRL register accessor: an alias for `Reg<CLK_USB_CTRL_SPEC>`"],["CLK_USB_DIV","CLK_USB_DIV register accessor: an alias for `Reg<CLK_USB_DIV_SPEC>`"],["CLK_USB_SELECTED","CLK_USB_SELECTED register accessor: an alias for `Reg<CLK_USB_SELECTED_SPEC>`"],["ENABLED0","ENABLED0 register accessor: an alias for `Reg<ENABLED0_SPEC>`"],["ENABLED1","ENABLED1 register accessor: an alias for `Reg<ENABLED1_SPEC>`"],["FC0_DELAY","FC0_DELAY register accessor: an alias for `Reg<FC0_DELAY_SPEC>`"],["FC0_INTERVAL","FC0_INTERVAL register accessor: an alias for `Reg<FC0_INTERVAL_SPEC>`"],["FC0_MAX_KHZ","FC0_MAX_KHZ register accessor: an alias for `Reg<FC0_MAX_KHZ_SPEC>`"],["FC0_MIN_KHZ","FC0_MIN_KHZ register accessor: an alias for `Reg<FC0_MIN_KHZ_SPEC>`"],["FC0_REF_KHZ","FC0_REF_KHZ register accessor: an alias for `Reg<FC0_REF_KHZ_SPEC>`"],["FC0_RESULT","FC0_RESULT register accessor: an alias for `Reg<FC0_RESULT_SPEC>`"],["FC0_SRC","FC0_SRC register accessor: an alias for `Reg<FC0_SRC_SPEC>`"],["FC0_STATUS","FC0_STATUS register accessor: an alias for `Reg<FC0_STATUS_SPEC>`"],["INTE","INTE register accessor: an alias for `Reg<INTE_SPEC>`"],["INTF","INTF register accessor: an alias for `Reg<INTF_SPEC>`"],["INTR","INTR register accessor: an alias for `Reg<INTR_SPEC>`"],["INTS","INTS register accessor: an alias for `Reg<INTS_SPEC>`"],["SLEEP_EN0","SLEEP_EN0 register accessor: an alias for `Reg<SLEEP_EN0_SPEC>`"],["SLEEP_EN1","SLEEP_EN1 register accessor: an alias for `Reg<SLEEP_EN1_SPEC>`"],["WAKE_EN0","WAKE_EN0 register accessor: an alias for `Reg<WAKE_EN0_SPEC>`"],["WAKE_EN1","WAKE_EN1 register accessor: an alias for `Reg<WAKE_EN1_SPEC>`"]]};