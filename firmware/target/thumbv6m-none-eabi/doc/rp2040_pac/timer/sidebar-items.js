window.SIDEBAR_ITEMS = {"mod":[["alarm0","Arm alarm 0, and configure the time it will fire. Once armed, the alarm fires when TIMER_ALARM0 == TIMELR. The alarm will disarm itself once it fires, and can be disarmed early using the ARMED status register."],["alarm1","Arm alarm 1, and configure the time it will fire. Once armed, the alarm fires when TIMER_ALARM1 == TIMELR. The alarm will disarm itself once it fires, and can be disarmed early using the ARMED status register."],["alarm2","Arm alarm 2, and configure the time it will fire. Once armed, the alarm fires when TIMER_ALARM2 == TIMELR. The alarm will disarm itself once it fires, and can be disarmed early using the ARMED status register."],["alarm3","Arm alarm 3, and configure the time it will fire. Once armed, the alarm fires when TIMER_ALARM3 == TIMELR. The alarm will disarm itself once it fires, and can be disarmed early using the ARMED status register."],["armed","Indicates the armed/disarmed status of each alarm. A write to the corresponding ALARMx register arms the alarm. Alarms automatically disarm upon firing, but writing ones here will disarm immediately without waiting to fire."],["dbgpause","Set bits high to enable pause when the corresponding debug ports are active"],["inte","Interrupt Enable"],["intf","Interrupt Force"],["intr","Raw Interrupts"],["ints","Interrupt status after masking & forcing"],["pause","Set high to pause the timer"],["timehr","Read from bits 63:32 of time always read timelr before timehr"],["timehw","Write to bits 63:32 of time always write timelw before timehw"],["timelr","Read from bits 31:0 of time"],["timelw","Write to bits 31:0 of time writes do not get copied to time until timehw is written"],["timerawh","Raw read from bits 63:32 of time (no side effects)"],["timerawl","Raw read from bits 31:0 of time (no side effects)"]],"struct":[["RegisterBlock","Register block"]],"type":[["ALARM0","ALARM0 register accessor: an alias for `Reg<ALARM0_SPEC>`"],["ALARM1","ALARM1 register accessor: an alias for `Reg<ALARM1_SPEC>`"],["ALARM2","ALARM2 register accessor: an alias for `Reg<ALARM2_SPEC>`"],["ALARM3","ALARM3 register accessor: an alias for `Reg<ALARM3_SPEC>`"],["ARMED","ARMED register accessor: an alias for `Reg<ARMED_SPEC>`"],["DBGPAUSE","DBGPAUSE register accessor: an alias for `Reg<DBGPAUSE_SPEC>`"],["INTE","INTE register accessor: an alias for `Reg<INTE_SPEC>`"],["INTF","INTF register accessor: an alias for `Reg<INTF_SPEC>`"],["INTR","INTR register accessor: an alias for `Reg<INTR_SPEC>`"],["INTS","INTS register accessor: an alias for `Reg<INTS_SPEC>`"],["PAUSE","PAUSE register accessor: an alias for `Reg<PAUSE_SPEC>`"],["TIMEHR","TIMEHR register accessor: an alias for `Reg<TIMEHR_SPEC>`"],["TIMEHW","TIMEHW register accessor: an alias for `Reg<TIMEHW_SPEC>`"],["TIMELR","TIMELR register accessor: an alias for `Reg<TIMELR_SPEC>`"],["TIMELW","TIMELW register accessor: an alias for `Reg<TIMELW_SPEC>`"],["TIMERAWH","TIMERAWH register accessor: an alias for `Reg<TIMERAWH_SPEC>`"],["TIMERAWL","TIMERAWL register accessor: an alias for `Reg<TIMERAWL_SPEC>`"]]};