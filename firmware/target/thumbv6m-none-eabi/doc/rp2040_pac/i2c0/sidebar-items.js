window.SIDEBAR_ITEMS = {"mod":[["ic_ack_general_call","I2C ACK General Call Register"],["ic_clr_activity","Clear ACTIVITY Interrupt Register"],["ic_clr_gen_call","Clear GEN_CALL Interrupt Register"],["ic_clr_intr","Clear Combined and Individual Interrupt Register"],["ic_clr_rd_req","Clear RD_REQ Interrupt Register"],["ic_clr_restart_det","Clear RESTART_DET Interrupt Register"],["ic_clr_rx_done","Clear RX_DONE Interrupt Register"],["ic_clr_rx_over","Clear RX_OVER Interrupt Register"],["ic_clr_rx_under","Clear RX_UNDER Interrupt Register"],["ic_clr_start_det","Clear START_DET Interrupt Register"],["ic_clr_stop_det","Clear STOP_DET Interrupt Register"],["ic_clr_tx_abrt","Clear TX_ABRT Interrupt Register"],["ic_clr_tx_over","Clear TX_OVER Interrupt Register"],["ic_comp_param_1","Component Parameter Register 1"],["ic_comp_type","I2C Component Type Register"],["ic_comp_version","I2C Component Version Register"],["ic_con","I2C Control Register. This register can be written only when the DW_apb_i2c is disabled, which corresponds to the IC_ENABLE[0] register being set to 0. Writes at other times have no effect."],["ic_data_cmd","I2C Rx/Tx Data Buffer and Command Register; this is the register the CPU writes to when filling the TX FIFO and the CPU reads from when retrieving bytes from RX FIFO."],["ic_dma_cr","DMA Control Register"],["ic_dma_rdlr","I2C Receive Data Level Register"],["ic_dma_tdlr","DMA Transmit Data Level Register"],["ic_enable","I2C Enable Register"],["ic_enable_status","I2C Enable Status Register"],["ic_fs_scl_hcnt","Fast Mode or Fast Mode Plus I2C Clock SCL High Count Register"],["ic_fs_scl_lcnt","Fast Mode or Fast Mode Plus I2C Clock SCL Low Count Register"],["ic_fs_spklen","I2C SS, FS or FM+ spike suppression limit"],["ic_intr_mask","I2C Interrupt Mask Register."],["ic_intr_stat","I2C Interrupt Status Register"],["ic_raw_intr_stat","I2C Raw Interrupt Status Register"],["ic_rx_tl","I2C Receive FIFO Threshold Register"],["ic_rxflr","I2C Receive FIFO Level Register This register contains the number of valid data entries in the receive FIFO buffer. It is cleared whenever: - The I2C is disabled - Whenever there is a transmit abort caused by any of the events tracked in IC_TX_ABRT_SOURCE The register increments whenever data is placed into the receive FIFO and decrements when data is taken from the receive FIFO."],["ic_sar","I2C Slave Address Register"],["ic_sda_hold","I2C SDA Hold Time Length Register"],["ic_sda_setup","I2C SDA Setup Register"],["ic_slv_data_nack_only","Generate Slave Data NACK Register"],["ic_ss_scl_hcnt","Standard Speed I2C Clock SCL High Count Register"],["ic_ss_scl_lcnt","Standard Speed I2C Clock SCL Low Count Register"],["ic_status","I2C Status Register"],["ic_tar","I2C Target Address Register"],["ic_tx_abrt_source","I2C Transmit Abort Source Register"],["ic_tx_tl","I2C Transmit FIFO Threshold Register"],["ic_txflr","I2C Transmit FIFO Level Register This register contains the number of valid data entries in the transmit FIFO buffer. It is cleared whenever: - The I2C is disabled - There is a transmit abort - that is, TX_ABRT bit is set in the IC_RAW_INTR_STAT register - The slave bulk transmit mode is aborted The register increments whenever data is placed into the transmit FIFO and decrements when data is taken from the transmit FIFO."]],"struct":[["RegisterBlock","Register block"]],"type":[["IC_ACK_GENERAL_CALL","IC_ACK_GENERAL_CALL register accessor: an alias for `Reg<IC_ACK_GENERAL_CALL_SPEC>`"],["IC_CLR_ACTIVITY","IC_CLR_ACTIVITY register accessor: an alias for `Reg<IC_CLR_ACTIVITY_SPEC>`"],["IC_CLR_GEN_CALL","IC_CLR_GEN_CALL register accessor: an alias for `Reg<IC_CLR_GEN_CALL_SPEC>`"],["IC_CLR_INTR","IC_CLR_INTR register accessor: an alias for `Reg<IC_CLR_INTR_SPEC>`"],["IC_CLR_RD_REQ","IC_CLR_RD_REQ register accessor: an alias for `Reg<IC_CLR_RD_REQ_SPEC>`"],["IC_CLR_RESTART_DET","IC_CLR_RESTART_DET register accessor: an alias for `Reg<IC_CLR_RESTART_DET_SPEC>`"],["IC_CLR_RX_DONE","IC_CLR_RX_DONE register accessor: an alias for `Reg<IC_CLR_RX_DONE_SPEC>`"],["IC_CLR_RX_OVER","IC_CLR_RX_OVER register accessor: an alias for `Reg<IC_CLR_RX_OVER_SPEC>`"],["IC_CLR_RX_UNDER","IC_CLR_RX_UNDER register accessor: an alias for `Reg<IC_CLR_RX_UNDER_SPEC>`"],["IC_CLR_START_DET","IC_CLR_START_DET register accessor: an alias for `Reg<IC_CLR_START_DET_SPEC>`"],["IC_CLR_STOP_DET","IC_CLR_STOP_DET register accessor: an alias for `Reg<IC_CLR_STOP_DET_SPEC>`"],["IC_CLR_TX_ABRT","IC_CLR_TX_ABRT register accessor: an alias for `Reg<IC_CLR_TX_ABRT_SPEC>`"],["IC_CLR_TX_OVER","IC_CLR_TX_OVER register accessor: an alias for `Reg<IC_CLR_TX_OVER_SPEC>`"],["IC_COMP_PARAM_1","IC_COMP_PARAM_1 register accessor: an alias for `Reg<IC_COMP_PARAM_1_SPEC>`"],["IC_COMP_TYPE","IC_COMP_TYPE register accessor: an alias for `Reg<IC_COMP_TYPE_SPEC>`"],["IC_COMP_VERSION","IC_COMP_VERSION register accessor: an alias for `Reg<IC_COMP_VERSION_SPEC>`"],["IC_CON","IC_CON register accessor: an alias for `Reg<IC_CON_SPEC>`"],["IC_DATA_CMD","IC_DATA_CMD register accessor: an alias for `Reg<IC_DATA_CMD_SPEC>`"],["IC_DMA_CR","IC_DMA_CR register accessor: an alias for `Reg<IC_DMA_CR_SPEC>`"],["IC_DMA_RDLR","IC_DMA_RDLR register accessor: an alias for `Reg<IC_DMA_RDLR_SPEC>`"],["IC_DMA_TDLR","IC_DMA_TDLR register accessor: an alias for `Reg<IC_DMA_TDLR_SPEC>`"],["IC_ENABLE","IC_ENABLE register accessor: an alias for `Reg<IC_ENABLE_SPEC>`"],["IC_ENABLE_STATUS","IC_ENABLE_STATUS register accessor: an alias for `Reg<IC_ENABLE_STATUS_SPEC>`"],["IC_FS_SCL_HCNT","IC_FS_SCL_HCNT register accessor: an alias for `Reg<IC_FS_SCL_HCNT_SPEC>`"],["IC_FS_SCL_LCNT","IC_FS_SCL_LCNT register accessor: an alias for `Reg<IC_FS_SCL_LCNT_SPEC>`"],["IC_FS_SPKLEN","IC_FS_SPKLEN register accessor: an alias for `Reg<IC_FS_SPKLEN_SPEC>`"],["IC_INTR_MASK","IC_INTR_MASK register accessor: an alias for `Reg<IC_INTR_MASK_SPEC>`"],["IC_INTR_STAT","IC_INTR_STAT register accessor: an alias for `Reg<IC_INTR_STAT_SPEC>`"],["IC_RAW_INTR_STAT","IC_RAW_INTR_STAT register accessor: an alias for `Reg<IC_RAW_INTR_STAT_SPEC>`"],["IC_RXFLR","IC_RXFLR register accessor: an alias for `Reg<IC_RXFLR_SPEC>`"],["IC_RX_TL","IC_RX_TL register accessor: an alias for `Reg<IC_RX_TL_SPEC>`"],["IC_SAR","IC_SAR register accessor: an alias for `Reg<IC_SAR_SPEC>`"],["IC_SDA_HOLD","IC_SDA_HOLD register accessor: an alias for `Reg<IC_SDA_HOLD_SPEC>`"],["IC_SDA_SETUP","IC_SDA_SETUP register accessor: an alias for `Reg<IC_SDA_SETUP_SPEC>`"],["IC_SLV_DATA_NACK_ONLY","IC_SLV_DATA_NACK_ONLY register accessor: an alias for `Reg<IC_SLV_DATA_NACK_ONLY_SPEC>`"],["IC_SS_SCL_HCNT","IC_SS_SCL_HCNT register accessor: an alias for `Reg<IC_SS_SCL_HCNT_SPEC>`"],["IC_SS_SCL_LCNT","IC_SS_SCL_LCNT register accessor: an alias for `Reg<IC_SS_SCL_LCNT_SPEC>`"],["IC_STATUS","IC_STATUS register accessor: an alias for `Reg<IC_STATUS_SPEC>`"],["IC_TAR","IC_TAR register accessor: an alias for `Reg<IC_TAR_SPEC>`"],["IC_TXFLR","IC_TXFLR register accessor: an alias for `Reg<IC_TXFLR_SPEC>`"],["IC_TX_ABRT_SOURCE","IC_TX_ABRT_SOURCE register accessor: an alias for `Reg<IC_TX_ABRT_SOURCE_SPEC>`"],["IC_TX_TL","IC_TX_TL register accessor: an alias for `Reg<IC_TX_TL_SPEC>`"]]};