[build]
target = "thumbv6m-none-eabi"

[target.'cfg(all(target_arch = "arm", target_os = "none"))']

#runner = "probe-run --chip RP2040"
runner = "elf2uf2-rs -d"

rustflags = [
  # This is needed if your flash or ram addresses are not aligned to 0x10000 in memory.x
  # See https://github.com/rust-embedded/cortex-m-quickstart/pull/95
  "-C", "link-arg=--nmagic",

  # LLD (shipped with the Rust toolchain) is used as the default linker

  # if you run into problems with LLD switch to the GNU linker by commenting out
  # this line
  "-C", "linker=arm-none-eabi-ld",
  "-C", "link-arg=-Tlink.x",
  "-C", "link-arg=-lc",
  "-C", "link-arg=--allow-multiple-definition",

  # if you need to link to pre-compiled C libraries provided by a C toolchain
  # use GCC as the linker by commenting out both lines above and then
  # uncommenting the three lines below
  # "-C", "linker=arm-none-eabi-gcc",
  # "-C", "link-arg=-Wl,-Tlink.x",
  # "-C", "link-arg=-nostartfiles",

  # "-C", "linker=flip-link",
  # "-C", "link-arg=--nmagic",
  # "-C", "link-arg=-Tlink.x",
  # "-C", "link-arg=-Tdefmt.x",

  # # Code-size optimizations.
  # #   trap unreachable can save a lot of space, but requires nightly compiler.
  # #   uncomment the next line if you wish to enable it
  # # "-Z", "trap-unreachable=no",
  "-C", "inline-threshold=5",
  "-C", "no-vectorize-loops",
]
